syntax = "proto3";
package sdk.blocksdk.v1;

option go_package = "github.com/skip-mev/block-sdk/x/blocksdk/types";

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "google/api/annotations.proto";
import "amino/amino.proto";
import "sdk/blocksdk/v1/blocksdk.proto";

// Msg defines the x/blocksdk Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc RegisterLane(MsgRegisterLane) returns (MsgRegisterLaneResponse){
    option (google.api.http).post = "/block-sdk/blocksdk/v1/register_lane";
  }
  rpc UpdateLane(MsgUpdateLane) returns (MsgUpdateLaneResponse) {
    option (google.api.http).post = "/block-sdk/blocksdk/v1/update_lane";
  }
}

message MsgRegisterLane {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "block-sdk/x/blocksdk/MsgRegisterLane";

  option (gogoproto.equal) = false;

  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  Lane lane = 2 [ (gogoproto.nullable) = false ];
}

message MsgRegisterLaneResponse {}

message MsgUpdateLane {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "block-sdk/x/blocksdk/MsgUpdateLane";

  option (gogoproto.equal) = false;

  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  Lane lane = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateLaneResponse {}