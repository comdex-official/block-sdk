syntax = "proto3";
package sdk.blocksdk.v1;

option go_package = "github.com/skip-mev/block-sdk/x/blocksdk/types";

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
import "sdk/blocksdk/v1/blocksdk.proto";
import "sdk/blocksdk/v1/params.proto";

// Msg defines the x/blocksdk Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateLane defines a method to update an existing lane in the store.
  rpc UpdateLane(MsgUpdateLane) returns (MsgUpdateLaneResponse);

  // UpdateParams defines a governance operation for updating the x/blocksdk
  // module parameters. The authority is hard-coded to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgUpdateLane defines a request to update an existing lane in the store.
message MsgUpdateLane {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "block-sdk/x/blocksdk/MsgUpdateLane";

  option (gogoproto.equal) = false;

  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  Lane lane = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateLaneResponse defines a response to update an existing lane in the
// store.
message MsgUpdateLaneResponse {}

// MsgUpdateParams defines a request type for updating the x/blocksdk module
// parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "block-sdk/x/blocksdk/MsgUpdateParams";

  option (gogoproto.equal) = false;

  // authority is the address of the account that is authorized to update the
  // x/blocksdk module parameters.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // params is the new parameters for the x/blocksdk module.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the Msg/UpdateParams response type.
message MsgUpdateParamsResponse {}
